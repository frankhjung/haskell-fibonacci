-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Show Fibonacci index or sequence
--   
--   A simple Haskell project to generate Fibonacci numbers.
@package Fibonacci
@version 0.15.0


module Fibonacci

-- | Binet Fibonacci.
--   
--   Uses the <a>Binet Formula</a> to generate the nth Fibonacci number.
fibb :: Int -> Integer

-- | Fast Fibonacci.
--   
--   From: "Haskell - the craft of functional programming" Chapter 5, Data
--   Types, Tuples and Lists
fibf :: Int -> Integer

-- | Fibonacci Index.
--   
--   This retrieves the nth Fibonacci value by index from a sequence
--   produced by <a>fibs</a>.
fibi :: Int -> Integer

-- | Parallel Fibonacci.
--   
--   Calculate Fibonacci in parallel.
--   
--   From: "Practical Concurrent Haskell: With Big Data Applications",
--   Chapter 3, Parallelism and Concurrency with Haskell
fibp :: Int -> Integer

-- | Fibonacci Sequence.
--   
--   The <a>fibs</a> function is a definition of an infinite list of
--   Fibonacci numbers. It is defined recursively, by starting with the two
--   numbers 0 and 1, and then generating the rest of the sequence by
--   adding adjacent pairs of numbers in the list.
--   
--   The <a>zipWith</a> function is used to create a list where each
--   element is the sum of the previous two elements in the list.
--   Specifically, <tt>zipWith (+) fibs (tail fibs)</tt> takes two lists as
--   input: <a>fibs</a>, which is the original sequence starting with 0 and
--   1, and <tt>tail fibs</tt>, which is the same sequence but with the
--   first element removed. It applies the <tt>+</tt> function to each
--   corresponding pair of elements in the two lists, resulting in a new
--   list where each element is the sum of the previous two elements in
--   <a>fibs</a>.
--   
--   The resulting list is then prepended with 0 and 1 to create the full
--   sequence, which is an infinite list of Fibonacci numbers [0, 1, 1, 2,
--   3, 5, 8, 13, 21, ...].
--   
--   This is very similar to this implementation:
--   
--   <pre>
--   fibs = 0 : 1 : helper fibs (tail fibs)
--     ​where​​
--       helper (a:as) (b:bs) = a + b : helper as bs
--   </pre>
fibs :: [Integer]

-- | Traditional Fibonacci.
--   
--   The traditional recursive Fibonacci.
fibt :: Int -> Integer
